{
	"compiler": {
		"version": "0.5.5+commit.47a71e8f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "hasClosed",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "rate",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "goal",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "weiRaised",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOpen",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "closingTime",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "finalize",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "wallet",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "goalReached",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "finalized",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "openingTime",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "refundee",
						"type": "address"
					}
				],
				"name": "claimRefund",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "buyTokens",
				"outputs": [],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "goal",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"payable": true,
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "CrowdsaleFinalized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "prevClosingTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "newClosingTime",
						"type": "uint256"
					}
				],
				"name": "TimedCrowdsaleExtended",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "purchaser",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "beneficiary",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensPurchased",
				"type": "event"
			}
		],
		"devdoc": {
			"details": "Extension of `FinalizableCrowdsale` contract that adds a funding goal, and the possibility of users getting a refund if goal is not met. * Deprecated, use `RefundablePostDeliveryCrowdsale` instead. Note that if you allow tokens to be traded before the goal is met, then an attack is possible in which the attacker purchases tokens from the crowdsale and when they sees that the goal is unlikely to be met, they sell their tokens (possibly at a discount). The attacker will be refunded when the crowdsale is finalized, and the users that purchased from them will be left with worthless tokens.",
			"methods": {
				"buyTokens(address)": {
					"details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
					"params": {
						"beneficiary": "Recipient of the token purchase"
					}
				},
				"claimRefund(address)": {
					"details": "Investors can claim refunds here if crowdsale is unsuccessful.",
					"params": {
						"refundee": "Whose refund will be claimed."
					}
				},
				"closingTime()": {
					"return": "the crowdsale closing time."
				},
				"constructor": {
					"details": "Constructor, creates RefundEscrow.",
					"params": {
						"goal": "Funding goal"
					}
				},
				"finalize()": {
					"details": "Must be called after crowdsale ends, to do some extra finalization work. Calls the contract's finalization function."
				},
				"finalized()": {
					"return": "true if the crowdsale is finalized, false otherwise."
				},
				"goal()": {
					"return": "minimum amount of funds to be raised in wei."
				},
				"goalReached()": {
					"details": "Checks whether funding goal was reached.",
					"return": "Whether funding goal was reached"
				},
				"hasClosed()": {
					"details": "Checks whether the period in which the crowdsale is open has already elapsed.",
					"return": "Whether crowdsale period has elapsed"
				},
				"isOpen()": {
					"return": "true if the crowdsale is open, false otherwise."
				},
				"openingTime()": {
					"return": "the crowdsale opening time."
				},
				"rate()": {
					"return": "the number of token units a buyer gets per wei."
				},
				"token()": {
					"return": "the token being sold."
				},
				"wallet()": {
					"return": "the address where funds are collected."
				},
				"weiRaised()": {
					"return": "the amount of wei raised."
				}
			},
			"title": "RefundableCrowdsale"
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/crowdsale/distribution/RefundableCrowdsale.sol": "RefundableCrowdsale"
		},
		"evmVersion": "petersburg",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/GSN/Context.sol": {
			"keccak256": "0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061",
			"urls": [
				"bzzr://51482c01bddf23793bddee43b60ab9578a62948a4f2082def24ea792a553b055"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/crowdsale/Crowdsale.sol": {
			"keccak256": "0xe612eb8a3023c1a4f4d7e2d0aaf7f19c25e9d772c46a6e95790ddb42ba7baa99",
			"urls": [
				"bzzr://3f11e0277a173ba437a448df0f1ab16a64b1b1dcd3f34019e052a7c5d14c1ea7"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/crowdsale/distribution/FinalizableCrowdsale.sol": {
			"keccak256": "0x22ad427395c439878122cbfbf13e896fd48d1fad0c6fc889a36b4f1bf4743ff4",
			"urls": [
				"bzzr://1c725bc536a34c8ae31246c7c4327a2fe7abeb7686979516c1ab65c8959f71ec"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/crowdsale/distribution/RefundableCrowdsale.sol": {
			"keccak256": "0x51ff319b8ccbbed80ef2362ab98b473b705bf39d387610baadd7b9dd0353d85e",
			"urls": [
				"bzzr://5385067c9b5f762794d9c0733f210b5b6977d8caecb0221c8c5393fb79e6dd24"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/crowdsale/validation/TimedCrowdsale.sol": {
			"keccak256": "0x9407dd37cfed74aa107fd1614c478ba0a2bc3e084e9aa8fbd5a6f316c53aed3b",
			"urls": [
				"bzzr://196407d49d26f709494b573b06676eaa21b0019ebebd4e610a8b1276965a8067"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol": {
			"keccak256": "0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076",
			"urls": [
				"bzzr://292843005e754e752644f767477ec5ad7a1ffc91ddb18c38b8079c62f3993cad"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/ownership/Secondary.sol": {
			"keccak256": "0xb55d511ea1d79aa4ff7063ac50d134a47c6d3b43b0ee7163e9310c403a945888",
			"urls": [
				"bzzr://e12539a89d0db5576523780d97904d4e5031a8d1c6b74122968dd560cf4b4cf0"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/payment/escrow/ConditionalEscrow.sol": {
			"keccak256": "0xc43492ecb8d0eb86ba1ecc3f50e5474021ba58ec14c004c41c6f6550e6ceafc0",
			"urls": [
				"bzzr://24eb091f7e2a1cd7583f2470432a0034f154d2ad988558b0a9672253de44fc0d"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/payment/escrow/Escrow.sol": {
			"keccak256": "0xdb5c39b703e6c79e801e38efebe94c8cf3683bf369cc3131cb992fedd4157134",
			"urls": [
				"bzzr://08a75f1b184cd77cbf969203978e676d771e4255e7869433b4ea74f52797f669"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/payment/escrow/RefundEscrow.sol": {
			"keccak256": "0x83d02d923d47755b0a1a16c6f97a31e0de8378c6bbac42e8d69f388d84749a6c",
			"urls": [
				"bzzr://c4700a8b29bf37d5d21b9287db7a766e88444b919b46cc1a45b27aadf1ed54bf"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9",
			"urls": [
				"bzzr://cf2d583b8dce38d0617fdcd65f2fd9f126fe17b7f683b5a515ea9d2762d8b062"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol": {
			"keccak256": "0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2",
			"urls": [
				"bzzr://d2ff5aadcb697bc27ca3b0f6c40b4998e8cf0a1bd0f761d1df6d5981777841ae"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol": {
			"keccak256": "0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11",
			"urls": [
				"bzzr://4e1d23731da27602b8c552e54fb9976dadf8cf46a8f90a3c8c1b85fe044618b9"
			]
		},
		".deps/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0xb63221b23818d622bfd83d18e0968307e4fcb7a35536bdceded76e1cf8349acd",
			"urls": [
				"bzzr://35ed82f3c1174e1eb7d9ef351964024e535a992a5dbf4ff125a101aef441fd16"
			]
		}
	},
	"version": 1
}